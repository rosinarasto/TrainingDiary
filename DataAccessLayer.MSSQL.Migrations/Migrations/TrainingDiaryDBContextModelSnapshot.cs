// <auto-generated />
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.MSSQL.Migrations.Migrations
{
    [DbContext(typeof(TrainingDiaryDBContext))]
    partial class TrainingDiaryDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        },
                        new
                        {
                            Id = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.AccountUser", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("accountUsers");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            UserId = 2,
                            Id = 1
                        },
                        new
                        {
                            AccountId = 1,
                            UserId = 3,
                            Id = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.RecordField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RecordID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecordID");

                    b.ToTable("RecordFields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Record 1",
                            Name = "Record 1 Name",
                            RecordID = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Record 2",
                            Name = "Record 2 Name",
                            RecordID = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Record 3",
                            Name = "Record 3 Name",
                            RecordID = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Record 4",
                            Name = "Record 4 Name",
                            RecordID = 3
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Record 5",
                            Name = "Record 5 Name",
                            RecordID = 4
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description for Record 6",
                            Name = "Record 6 Name",
                            RecordID = 4
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.TrainingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TrainingRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 3,
                            OwnerId = 3
                        },
                        new
                        {
                            Id = 4,
                            OwnerId = 4
                        },
                        new
                        {
                            Id = 5,
                            OwnerId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            HashedPassword = "c8f03cbe8b4d321c601a18b2a46ee83ccf7ac684e8768c6a46648cb45a8ec504",
                            Salt = "a3bcd4f1e6b1c2d4",
                            UserName = "john_doe123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            HashedPassword = "9efcbedb2b6328e3384b207e49cd42428c77ad8f4b34c637d3b8bfa91fc4f76e",
                            Salt = "f4ac0a5bda6723b8",
                            UserName = "jane_smith456"
                        },
                        new
                        {
                            Id = 3,
                            Email = "charlie.brown@example.com",
                            HashedPassword = "02bbf3c177953e24b5a49848b1bb7794b225225226f5acb628ed5e7a564264cb",
                            Salt = "d1e5f4c9b3a7e9c2",
                            UserName = "charlie_brown789"
                        },
                        new
                        {
                            Id = 4,
                            Email = "alice.wonder@example.com",
                            HashedPassword = "4d7505d99f81fcb6b4f56b9350b47e03354b859fd4ea6b92c9a1b0e602f7c72f",
                            Salt = "ab2f8b79a3b5c1d2",
                            UserName = "alice_wonder123"
                        },
                        new
                        {
                            Id = 5,
                            Email = "bob.builder@example.com",
                            HashedPassword = "f0533b863a32d8c7c7e213869874f3ab25f436ae77c3da522dc11e619e4bb92b",
                            Salt = "2c6f8b9a7f3d2e19",
                            UserName = "bob_builder567"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Account", b =>
                {
                    b.HasOne("DataAccessLayer.Models.User", "Owner")
                        .WithOne("OwnedAccount")
                        .HasForeignKey("DataAccessLayer.Models.Account", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataAccessLayer.Models.AccountUser", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Account", "Account")
                        .WithMany("RestrictedUsers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.User", "User")
                        .WithMany("RestrictedAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.RecordField", b =>
                {
                    b.HasOne("DataAccessLayer.Models.TrainingRecord", "TrainingRecord")
                        .WithMany("RecordFields")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingRecord");
                });

            modelBuilder.Entity("DataAccessLayer.Models.TrainingRecord", b =>
                {
                    b.HasOne("DataAccessLayer.Models.User", "Owner")
                        .WithMany("TrainingRecords")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Account", b =>
                {
                    b.Navigation("RestrictedUsers");
                });

            modelBuilder.Entity("DataAccessLayer.Models.TrainingRecord", b =>
                {
                    b.Navigation("RecordFields");
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("OwnedAccount");

                    b.Navigation("RestrictedAccounts");

                    b.Navigation("TrainingRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
